I"$<h4 id="281">2.81</h4>

<p>If try to coerce two numbers, it would fall into a infinite loop.</p>

<p>It would show an error message if trying to convert an augument to
its own type, which is correct.</p>

<h4 id="282">2.82</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">apply-generic</span> <span class="nv">op</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">apply-generic</span> <span class="nv">op</span> <span class="nv">args</span> <span class="nv">type-list</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null?</span> <span class="nv">type-list</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">error</span> <span class="s">"No method for types"</span>
             <span class="p">(</span><span class="nb">list</span> <span class="nv">op</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">type-tag</span> <span class="nv">args</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">new-args</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                           <span class="p">(</span><span class="nf">convert</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">type-list</span><span class="p">)))</span>
                         <span class="nv">args</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">new-tags</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">type-tag</span> <span class="nv">new-args</span><span class="p">)))</span>
        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">proc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">op</span> <span class="nv">new-tags</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">if</span> <span class="nv">proc</span>
            <span class="p">(</span><span class="nb">apply</span> <span class="nv">proc</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">contents</span> <span class="nv">new-args</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">apply-generic</span> <span class="nv">op</span> <span class="nv">args</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">type-list</span><span class="p">)))))))</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">type-tags</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">type-tag</span> <span class="nv">args</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">proc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="nv">proc</span>
        <span class="p">(</span><span class="nb">apply</span> <span class="nv">proc</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">contents</span> <span class="nv">args</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">apply-generic</span> <span class="nv">op</span> <span class="nv">args</span> <span class="nv">type-tags</span><span class="p">)))))</span></code></pre></figure>

<h4 id="283">2.83</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">raise</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">apply-generic</span> <span class="ss">'raise</span> <span class="nv">x</span><span class="p">))</span>
 <span class="p">(</span><span class="nf">put</span> <span class="ss">'raise</span> <span class="ss">'integer</span>
      <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-rational</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">)))</span>

 <span class="p">(</span><span class="nf">put</span> <span class="ss">'raise</span> <span class="ss">'rational</span>
      <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-real</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">denom</span> <span class="nv">x</span><span class="p">)))))</span>

 <span class="p">(</span><span class="nf">put</span> <span class="ss">'raise</span> <span class="ss">'real</span>
          <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-from-real-imag</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)))</span></code></pre></figure>

<h4 id="284--297">2.84 ~ 2.97</h4>

<p>I decided to skip the above ones just because they are so code intense,
maybe I will come back to them in the future.</p>

:ET