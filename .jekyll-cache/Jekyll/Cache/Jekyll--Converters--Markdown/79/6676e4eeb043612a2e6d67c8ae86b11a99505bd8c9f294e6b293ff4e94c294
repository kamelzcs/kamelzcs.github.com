I"$<h4 id="lecture-content">Lecture Content</h4>

<h5 id="algebraic-data-types-in-general">Algebraic data types in general</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">AlgDataType</span> <span class="o">=</span> <span class="kt">Constr1</span> <span class="kt">Type11</span> <span class="kt">Type12</span>
                 <span class="o">|</span> <span class="kt">Constr2</span> <span class="kt">Type21</span>
                 <span class="o">|</span> <span class="kt">Constr3</span> <span class="kt">Type31</span> <span class="kt">Type32</span> <span class="kt">Type33</span>
                 <span class="o">|</span> <span class="kt">Constr4</span></code></pre></figure>

<p>This is the general <code class="highlighter-rouge">Algebraic data types</code> definition.</p>

<p>One important note:</p>

<ul>
  <li>type and data constructor names must always start with a capital letter</li>
  <li>variables(including names of functions) must always start with a lowercase letter</li>
</ul>

<h4 id="home-work">Home Work</h4>

<h5 id="exercise-1">Exercise 1</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">parseMessage</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">LogMessage</span>
<span class="n">parseMessage</span> <span class="n">s</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">words</span> <span class="n">s</span> <span class="kr">of</span>
  <span class="p">(</span><span class="s">"I"</span><span class="o">:</span><span class="n">t</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">LogMessage</span> <span class="kt">Info</span> <span class="p">(</span><span class="n">read</span> <span class="n">t</span><span class="p">)</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">xs</span><span class="p">)</span>
  <span class="p">(</span><span class="s">"W"</span><span class="o">:</span><span class="n">t</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">LogMessage</span> <span class="kt">Warning</span> <span class="p">(</span><span class="n">read</span> <span class="n">t</span><span class="p">)</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">xs</span><span class="p">)</span>
  <span class="p">(</span><span class="s">"E"</span><span class="o">:</span><span class="n">c</span><span class="o">:</span><span class="n">t</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">LogMessage</span> <span class="p">(</span><span class="kt">Error</span> <span class="o">$</span> <span class="n">read</span> <span class="n">c</span><span class="p">)</span> <span class="p">(</span><span class="n">read</span> <span class="n">t</span><span class="p">)</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">xs</span><span class="p">)</span>
  <span class="kr">_</span> <span class="o">-&gt;</span> <span class="kt">Unknown</span> <span class="n">s</span>

<span class="n">parse</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">LogMessage</span><span class="p">]</span>
<span class="n">parse</span> <span class="o">=</span> <span class="n">map</span> <span class="n">parseMessage</span> <span class="o">.</span> <span class="n">lines</span></code></pre></figure>

<h5 id="exercise-2">Exercise 2</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">insert</span> <span class="o">::</span> <span class="kt">LogMessage</span> <span class="o">-&gt;</span> <span class="kt">MessageTree</span> <span class="o">-&gt;</span> <span class="kt">MessageTree</span>
<span class="n">insert</span> <span class="p">(</span><span class="kt">Unknown</span> <span class="kr">_</span><span class="p">)</span> <span class="n">m</span> <span class="o">=</span> <span class="n">m</span>
<span class="n">insert</span> <span class="n">m</span> <span class="kt">Leaf</span> <span class="o">=</span> <span class="kt">Node</span> <span class="kt">Leaf</span> <span class="n">m</span> <span class="kt">Leaf</span>
<span class="n">insert</span> <span class="n">m</span> <span class="p">(</span><span class="kt">Node</span> <span class="n">l</span> <span class="n">lg</span> <span class="n">r</span><span class="p">)</span>
  <span class="o">|</span> <span class="n">mT</span> <span class="o">&lt;</span> <span class="n">logT</span> <span class="o">=</span> <span class="kt">Node</span> <span class="p">(</span><span class="n">insert</span> <span class="n">m</span> <span class="n">l</span><span class="p">)</span> <span class="n">lg</span> <span class="n">r</span>
  <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">Node</span> <span class="n">l</span> <span class="n">lg</span> <span class="p">(</span><span class="n">insert</span> <span class="n">m</span> <span class="n">r</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="n">getTimeStamp</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="p">(</span><span class="kt">LogMessage</span> <span class="kr">_</span> <span class="n">t</span> <span class="kr">_</span><span class="p">)</span><span class="o">-&gt;</span> <span class="n">t</span>
                               <span class="kr">_</span> <span class="o">-&gt;</span> <span class="mi">0</span>
    <span class="n">mT</span> <span class="o">=</span> <span class="n">getTimeStamp</span> <span class="n">m</span>
    <span class="n">logT</span> <span class="o">=</span> <span class="n">getTimeStamp</span> <span class="n">lg</span></code></pre></figure>

<h5 id="exercise-3">Exercise 3</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">build</span> <span class="o">::</span> <span class="p">[</span><span class="kt">LogMessage</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">MessageTree</span>
<span class="n">build</span> <span class="o">=</span> <span class="n">foldr</span> <span class="n">insert</span> <span class="kt">Leaf</span></code></pre></figure>

<h5 id="exercise-4">Exercise 4</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">inOrder</span> <span class="o">::</span> <span class="kt">MessageTree</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">LogMessage</span><span class="p">]</span>
<span class="n">inOrder</span> <span class="kt">Leaf</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">inOrder</span> <span class="p">(</span><span class="kt">Node</span> <span class="n">l</span> <span class="n">lg</span> <span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="n">inOrder</span> <span class="n">l</span> <span class="o">++</span> <span class="p">[</span><span class="n">lg</span><span class="p">]</span> <span class="o">++</span> <span class="n">inOrder</span> <span class="n">r</span></code></pre></figure>

<h5 id="exercise-5">Exercise 5</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">whatWentWrong</span> <span class="o">::</span> <span class="p">[</span><span class="kt">LogMessage</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="n">whatWentWrong</span> <span class="o">=</span> <span class="n">map</span> <span class="n">getMsg</span> <span class="o">.</span> <span class="n">filter</span> <span class="n">seri</span> <span class="o">.</span> <span class="n">inOrder</span> <span class="o">.</span> <span class="n">build</span>
  <span class="kr">where</span> <span class="n">seri</span> <span class="p">(</span><span class="kt">LogMessage</span> <span class="p">(</span><span class="kt">Error</span> <span class="n">e</span><span class="p">)</span> <span class="kr">_</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">e</span> <span class="o">&gt;=</span> <span class="mi">50</span>
        <span class="n">seri</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">False</span>
        <span class="n">getMsg</span> <span class="p">(</span><span class="kt">LogMessage</span> <span class="kr">_</span> <span class="kr">_</span> <span class="n">m</span><span class="p">)</span> <span class="o">=</span> <span class="n">m</span></code></pre></figure>

<p>Test code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*LogAnalysis&gt; testWhatWentWrong parse whatWentWrong "sample.log" 
["Way too many pickles","Bad pickle-flange interaction detected","Flange failed!"]
</code></pre></div></div>
:ET