I"Ü[<h4 id="363">3.63</h4>

<p><code class="highlighter-rouge">guess</code> is used to share the computation result between the succssive calling.
Otherwise each call to <code class="highlighter-rouge">sqrt-stream x</code> would require recursively calling.</p>

<p>If <code class="highlighter-rouge">memo-proc</code> is not used, these two versions would be the same efficiency.</p>

<h4 id="364">3.64</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">stream-limit</span> <span class="nv">s</span> <span class="nv">tolerance</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">s2</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="p">(</span><span class="nb">abs</span>
             <span class="p">(</span><span class="nb">-</span>
               <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s2</span><span class="p">)))</span>
           <span class="nv">tolerance</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s2</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">stream-limit</span> <span class="nv">s2</span> <span class="nv">tolerance</span><span class="p">))))</span></code></pre></figure>

<h4 id="365">3.65</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">euler-transform</span> <span class="nv">s</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">s0</span> <span class="p">(</span><span class="nf">stream-ref</span> <span class="nv">s</span> <span class="mi">0</span><span class="p">))</span>           <span class="c1">; Sn-1</span>
        <span class="p">(</span><span class="nf">s1</span> <span class="p">(</span><span class="nf">stream-ref</span> <span class="nv">s</span> <span class="mi">1</span><span class="p">))</span>           <span class="c1">; Sn</span>
        <span class="p">(</span><span class="nf">s2</span> <span class="p">(</span><span class="nf">stream-ref</span> <span class="nv">s</span> <span class="mi">2</span><span class="p">)))</span>          <span class="c1">; Sn+1</span>
    <span class="p">(</span><span class="nf">cons-stream</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">s2</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">s2</span> <span class="nv">s1</span><span class="p">))</span>
                          <span class="p">(</span><span class="nb">+</span> <span class="nv">s0</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">-2</span> <span class="nv">s1</span><span class="p">)</span> <span class="nv">s2</span><span class="p">)))</span>
                 <span class="p">(</span><span class="nf">euler-transform</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-tableau</span> <span class="nv">transform</span> <span class="nv">s</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cons-stream</span> <span class="nv">s</span>
               <span class="p">(</span><span class="nf">make-tableau</span> <span class="nv">transform</span>
                             <span class="p">(</span><span class="nf">transform</span> <span class="nv">s</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">accelerated-sequence</span> <span class="nv">transform</span> <span class="nv">s</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">stream-map</span> <span class="nv">stream-car</span>
              <span class="p">(</span><span class="nf">make-tableau</span> <span class="nv">transform</span> <span class="nv">s</span><span class="p">)))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">log2-summands</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cons-stream</span> <span class="p">(</span><span class="nb">/</span> <span class="mf">1.0</span> <span class="nv">n</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">stream-map</span> <span class="nv">-</span> <span class="p">(</span><span class="nf">log2-summands</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">log2-stream</span>
  <span class="p">(</span><span class="nf">partial-sums</span> <span class="p">(</span><span class="nf">log2-summands</span> <span class="mi">1</span><span class="p">)))</span>

<span class="p">(</span><span class="nf">stream-limit</span>
  <span class="p">(</span><span class="nf">accelerated-sequence</span> <span class="nv">euler-transform</span> <span class="nv">log2-stream</span><span class="p">)</span> <span class="mf">0.0001</span><span class="p">)</span></code></pre></figure>

<h4 id="366">3.66</h4>

<table>
  <thead>
    <tr>
      <th>1</th>
      <th>2</th>
      <th>4</th>
      <th>6</th>
      <th>8</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Â </td>
      <td>3</td>
      <td>5</td>
      <td>9</td>
      <td>13</td>
    </tr>
    <tr>
      <td>Â </td>
      <td>Â </td>
      <td>7</td>
      <td>11</td>
      <td>19</td>
    </tr>
    <tr>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
      <td>15</td>
      <td>23</td>
    </tr>
  </tbody>
</table>

<p>The order to traverse the pair is listed as above.
Some observations:</p>

<p>$(i,i)=2^i-1$</p>

<p>$(i, i + 1) = 3*2^{i-1}-1$</p>

<p>$(i, k) = 3*2^{i-1}-1 + (k- i - 1) * 2^i$</p>

<h4 id="367">3.67</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">s</span> <span class="nv">t</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cons-stream</span>
   <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">t</span><span class="p">))</span>
   <span class="p">(</span><span class="nf">interleave</span>
     <span class="p">(</span><span class="nf">interleave</span>
       <span class="p">(</span><span class="nf">stream-map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
                   <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">t</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">stream-map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">t</span><span class="p">)))</span>
                   <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s</span><span class="p">)))</span>
     <span class="p">(</span><span class="nf">pairs</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">t</span><span class="p">)))))</span></code></pre></figure>

<h4 id="368">3.68</h4>

<p>Only the <code class="highlighter-rouge">cons-stream</code> is a normal-order function, while <code class="highlighter-rouge">interleave</code> is not.
When <code class="highlighter-rouge">interleave</code> evaluate its two parameters, which includes <code class="highlighter-rouge">pair</code>, would lead to
infinite loop.</p>

<h4 id="369">3.69</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">triples</span> <span class="nv">s1</span> <span class="nv">s2</span> <span class="nv">s3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cons-stream</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s1</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s2</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s3</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">interleave</span>
      <span class="p">(</span><span class="nf">stream-map</span>
        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">append</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s1</span><span class="p">))</span>
                            <span class="nv">x</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">stream-cdr</span>
          <span class="p">(</span><span class="nf">pair</span> <span class="nv">s2</span> <span class="nv">s3</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">triples</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s1</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s2</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s3</span><span class="p">)))))</span></code></pre></figure>

<h4 id="370">3.70</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">merge-weighted</span> <span class="nv">s1</span> <span class="nv">s2</span> <span class="nv">weight</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">stream-null?</span> <span class="nv">s1</span><span class="p">)</span> <span class="nv">s2</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">stream-null?</span> <span class="nv">s2</span><span class="p">)</span> <span class="nv">s1</span><span class="p">)</span>
        <span class="p">(</span><span class="k">else</span>
          <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">s1car</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s1</span><span class="p">))</span>
                <span class="p">(</span><span class="nf">s2car</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s2</span><span class="p">)))</span>
            <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;=</span> <span class="p">(</span><span class="nf">weight</span> <span class="nv">s1car</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">weight</span> <span class="nv">s2car</span><span class="p">))</span>
              <span class="p">(</span><span class="nf">cons-stream</span> <span class="nv">s1car</span>
                           <span class="p">(</span><span class="nf">merge-weighted</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s1</span><span class="p">)</span>
                                           <span class="nv">s2</span>
                                           <span class="nv">weight</span><span class="p">))</span>
              <span class="p">(</span><span class="nf">cons-stream</span> <span class="nv">s2car</span>
                           <span class="p">(</span><span class="nf">merge-weighted</span> <span class="nv">s1</span>
                                           <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s2</span><span class="p">)</span>
                                           <span class="nv">weight</span><span class="p">)))))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">weighted-pairs</span> <span class="nv">s</span> <span class="nv">t</span> <span class="nv">weight</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cons-stream</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">t</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">merge-weighted</span>
      <span class="p">(</span><span class="nf">stream-map</span>
        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">s</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">t</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">weighted-pairs</span>
        <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">s</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">t</span><span class="p">)</span>
        <span class="nv">weight</span><span class="p">)</span>
      <span class="nv">weight</span><span class="p">)))</span>

<span class="p">(</span><span class="nf">weighted-pairs</span> <span class="nv">integers</span>
                <span class="nv">integers</span>
                <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                  <span class="p">(</span><span class="nb">apply</span> <span class="nv">+</span> <span class="nv">x</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">no-factors</span>
  <span class="p">(</span><span class="nf">stream-filter</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">not</span>
        <span class="p">(</span><span class="k">or</span> <span class="p">(</span><span class="nf">divides?</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">divides?</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">divides?</span> <span class="nv">x</span> <span class="mi">5</span><span class="p">))))</span>
    <span class="nv">integers</span><span class="p">))</span>

<span class="p">(</span><span class="nf">weighted-pairs</span> <span class="nv">no-factors</span>
                <span class="nv">no-factors</span>
                <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">lst</span><span class="p">)</span>
                  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">i</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span>
                        <span class="p">(</span><span class="nf">j</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">lst</span><span class="p">)))</span>
                    <span class="p">(</span><span class="nb">+</span>
                      <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span> <span class="nv">i</span><span class="p">)</span>
                      <span class="p">(</span><span class="nb">*</span> <span class="mi">3</span> <span class="nv">j</span><span class="p">)</span>
                      <span class="p">(</span><span class="nb">*</span> <span class="mi">5</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">)))))</span></code></pre></figure>

<h4 id="371">3.71</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">sum-cube</span> <span class="nv">pair</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">i</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">pair</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">j</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">pair</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">i</span> <span class="nv">i</span> <span class="nv">i</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">*</span> <span class="nv">j</span> <span class="nv">j</span> <span class="nv">j</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">all-pairs</span>
  <span class="p">(</span><span class="nf">weighted-pairs</span> <span class="nv">integers</span> <span class="nv">integers</span> <span class="nv">sum-cube</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">ram-numbers</span> <span class="nv">stream</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nf">w1</span> <span class="p">(</span><span class="nf">sum-cube</span>
               <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">stream</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">rest</span> <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">stream</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">w2</span> <span class="p">(</span><span class="nf">sum-cube</span>
               <span class="p">(</span><span class="nf">stream-car</span> <span class="nv">rest</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">w1</span> <span class="nv">w2</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">cons-stream</span> <span class="nv">w1</span>
                   <span class="p">(</span><span class="nf">ram-numbers</span> <span class="p">(</span><span class="nf">stream-cdr</span>
                                  <span class="nv">rest</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">ram-numbers</span> <span class="nv">rest</span><span class="p">))))</span>

<span class="p">(</span><span class="nf">show-stream</span> <span class="p">(</span><span class="nf">ram-numbers</span> <span class="nv">all-pairs</span><span class="p">)</span> <span class="mi">6</span><span class="p">)</span></code></pre></figure>

<h4 id="373">3.73</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">RC</span> <span class="nv">r</span> <span class="nv">c</span> <span class="nv">dt</span><span class="p">)</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">i</span> <span class="nv">v</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">add-streams</span>
      <span class="p">(</span><span class="nf">scale-stream</span> <span class="nv">i</span> <span class="nv">r</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">integral</span> <span class="p">(</span><span class="nf">scale-stream</span> <span class="nv">i</span>
                              <span class="p">(</span><span class="nb">/</span> <span class="mi">1</span> <span class="nv">c</span><span class="p">))</span>
                <span class="nv">v</span>
                <span class="nv">dt</span><span class="p">))))</span></code></pre></figure>

<h4 id="374">3.74</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="nv">zero-crossings</span>
  <span class="p">(</span><span class="nf">stream-map</span> <span class="nv">sign-change-detector</span> <span class="nv">sense-data</span>
              <span class="p">(</span><span class="nf">cons-stream</span> <span class="mi">0</span> <span class="nv">sense-data</span><span class="p">)))</span></code></pre></figure>

<h4 id="375">3.75</h4>

<p>The last value of the origin stream should be passed in, otherwise <code class="highlighter-rouge">avpt</code>
would acutally become a recursive version.</p>

<h4 id="376">3.76</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">smooth</span> <span class="nv">s</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">stream-map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
              <span class="p">(</span><span class="nf">cons-stream</span> <span class="mi">0</span> <span class="nv">s</span><span class="p">)</span>
              <span class="nv">s</span><span class="p">))</span></code></pre></figure>

:ET