I"1<p><a href="http://community.topcoder.com/stat?c=round_overview&amp;rd=16464">SRM 661</a> consists of 250 + 450 + 1000.
250 and 450 are two maths problems.</p>

<h3 id="missinglcm"><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=13766&amp;rd=16464">MissingLCM</a></h3>

<p>Given $N \in [1,100000]$, find out the minimum $M \in (N, \infty)$ such that $lcm(1, 2, …, M)=lcm(N+1, N+2, …, M)$</p>

<h4 id="analyze">Analyze</h4>

<p>As $N$ is given, first consider how to calculate $lcm(1, 2, .., N)$</p>

<p>The answer would be only consider all the <code class="highlighter-rouge">Prime number</code> $P_i \in [1, N]$,
and find out the maximum $n_i$ such that
<script type="math/tex">% <![CDATA[
P_{i} ^ {n_i} <=N %]]></script> and <script type="math/tex">P_{i} ^ {n_i+1} >N</script>
then the answer would be <script type="math/tex">\prod_{i=1}^{l} P_{i}^{n_i}</script></p>

<p>So <script type="math/tex">lcm(N+1, N+2, ..., M)</script> should have all the <script type="math/tex">P_{i} ^ {n_i}</script> factors.
The the answer would be <script type="math/tex">\max \left[\left(\lfloor{\frac{N}{P_{i} ^ {n_i}}}\rfloor + 1\right) * {P_{i} ^ {n_i}}\right]</script></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">LL</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">MissingLCM</span> <span class="p">{</span>
    <span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">isPrime</span><span class="p">[</span><span class="mi">1000100</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">getMin</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
            <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">isPrime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">isPrime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="p">){</span>
                <span class="n">isPrime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">isPrime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">&lt;=</span> <span class="n">N</span> <span class="o">/</span> <span class="n">i</span><span class="p">){</span>
                <span class="n">temp</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="p">(</span><span class="n">N</span> <span class="o">/</span> <span class="n">temp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">temp</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<h3 id="colorfullinegraphs"><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=13765&amp;rd=16464">ColorfulLineGraphs</a></h3>

<h4 id="analyze-1">Analyze</h4>
<p>suppose $f[N][K]$ is the total number of using $K$ colors on $N$ nodes.</p>

<p>Now considering to build $f[N][K]$ from $f[N-1][K]$</p>

<p>For node $N$ choose whether to link to some node $i \in [1,N-1]$ or do not link at all.</p>

<ol>
  <li>linked to some node $i$, there are $K - 1$ ways of color possibilities each.</li>
  <li>do not link to any other, there are $K$ ways of color possibilities.</li>
</ol>

<p>So <script type="math/tex">f[N][K] = ((N - 1)*(K-1) + K)*f[N][K]</script></p>

<p>The current time complexity is $O(n)$, which is not fast enough.</p>

<p>Notice $M$ is small, <script type="math/tex">((N-1)*(K-1)+K)\mod M</script> would be cyclic, $M$ would be one periodic according to <a href="https://en.wikipedia.org/wiki/Lagrange%27s_theorem_%28group_theory%29">Lagrange’s theorem</a></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">LL</span><span class="p">;</span>
<span class="cp">#define REP(i, N) for (int i = 0; i &lt; (int)N; i++)
</span>
<span class="k">struct</span> <span class="n">ColorfulLineGraphs</span> <span class="p">{</span>
  <span class="kt">long</span> <span class="kt">long</span> <span class="n">N</span><span class="p">;</span>
  <span class="kt">long</span> <span class="kt">long</span> <span class="n">K</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">M</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">fastPower</span><span class="p">(</span><span class="n">LL</span> <span class="n">base</span><span class="p">,</span> <span class="n">LL</span> <span class="n">p</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">LL</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">((</span><span class="n">LL</span><span class="p">)</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">cur</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">cur</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">LL</span><span class="p">)</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">cur</span><span class="p">)){</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ans</span> <span class="o">*</span> <span class="n">base</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span> <span class="o">*</span> <span class="n">base</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kt">int</span> <span class="n">countWays</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">_N</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">_K</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_M</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">N</span> <span class="o">=</span> <span class="n">_N</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="n">_K</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="n">_M</span><span class="p">;</span>
    <span class="n">LL</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">K</span> <span class="o">%=</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">LL</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">cur</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="o">++</span><span class="n">cur</span><span class="p">){</span>
      <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">res</span> <span class="o">*</span> <span class="p">(</span><span class="n">cur</span> <span class="o">*</span> <span class="p">(</span><span class="n">K</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="n">M</span> <span class="o">==</span> <span class="n">cur</span><span class="p">){</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ans</span> <span class="o">*</span> <span class="n">fastPower</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">N</span> <span class="o">/</span> <span class="n">M</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

:ET