I"“<h4 id="lecture-contents">Lecture Contents</h4>

<blockquote>
  <p>There is no String ‚Äúinside‚Äù an <code class="highlighter-rouge">IO String</code>, <code class="highlighter-rouge">IO String</code> is a promise, to produce a String requires actually executing the computation. And the only way to do that is to give it (perhaps as part of some larger IO value) to the Haskell runtime system, via main.</p>
</blockquote>

<h4 id="home-work">Home Work</h4>

<h5 id="exercise-1">Exercise 1</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="c1">-- 1. define glCons, which adds an Employee to GuestList</span>

<span class="n">glCons</span> <span class="o">::</span> <span class="kt">Employee</span> <span class="o">-&gt;</span> <span class="kt">GuestList</span> <span class="o">-&gt;</span> <span class="kt">GuestList</span>
<span class="n">glCons</span> <span class="n">e</span> <span class="p">(</span><span class="kt">GL</span> <span class="n">es</span> <span class="n">fun</span><span class="p">)</span> <span class="o">=</span> <span class="kt">GL</span> <span class="p">(</span><span class="n">e</span><span class="o">:</span><span class="n">es</span><span class="p">)</span> <span class="p">(</span><span class="n">fun</span> <span class="o">+</span> <span class="n">empFun</span> <span class="n">e</span><span class="p">)</span>


<span class="c1">-- 2. define a Monoid instance for GuestList</span>

<span class="kr">instance</span> <span class="kt">Monoid</span> <span class="kt">GuestList</span> <span class="kr">where</span>
  <span class="n">mempty</span>  <span class="o">=</span> <span class="kt">GL</span> <span class="kt">[]</span> <span class="mi">0</span>
  <span class="n">mappend</span> <span class="p">(</span><span class="kt">GL</span> <span class="n">es1</span> <span class="n">f1</span><span class="p">)</span> <span class="p">(</span><span class="kt">GL</span> <span class="n">es2</span> <span class="n">f2</span><span class="p">)</span> <span class="o">=</span> <span class="kt">GL</span> <span class="p">(</span><span class="n">es1</span> <span class="o">++</span> <span class="n">es2</span><span class="p">)</span> <span class="o">$</span> <span class="n">f1</span> <span class="o">+</span> <span class="n">f2</span>

<span class="c1">-- 3. define moreFun, which takes two GuestLists and returns the one</span>
<span class="c1">-- which has more fun</span>

<span class="n">moreFun</span> <span class="o">::</span> <span class="kt">GuestList</span> <span class="o">-&gt;</span> <span class="kt">GuestList</span> <span class="o">-&gt;</span> <span class="kt">GuestList</span>
<span class="n">moreFun</span> <span class="o">=</span> <span class="n">max</span></code></pre></figure>

<h5 id="exercise-2">Exercise 2</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">treeFold</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>
<span class="n">treeFold</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Node</span> <span class="n">a</span> <span class="kt">[]</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span>
<span class="n">treeFold</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Node</span> <span class="n">a</span> <span class="n">forest</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">treeFold</span> <span class="n">f</span><span class="p">)</span> <span class="n">forest</span><span class="p">)</span></code></pre></figure>

<h5 id="exercise-3">Exercise 3</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">nextLevel</span> <span class="o">::</span> <span class="kt">Employee</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="kt">GuestList</span><span class="p">,</span> <span class="kt">GuestList</span><span class="p">)]</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">GuestList</span><span class="p">,</span> <span class="kt">GuestList</span><span class="p">)</span>
<span class="n">nextLevel</span> <span class="n">b</span> <span class="n">gls</span> <span class="o">=</span> <span class="p">(</span><span class="n">withBoss</span><span class="p">,</span> <span class="n">withoutBoss</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="n">withoutBoss</span> <span class="o">=</span> <span class="n">mconcat</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="n">uncurry</span> <span class="n">moreFun</span><span class="p">)</span> <span class="n">gls</span>
    <span class="n">withBoss</span> <span class="o">=</span> <span class="n">glCons</span> <span class="n">b</span> <span class="o">$</span> <span class="n">mconcat</span> <span class="o">$</span> <span class="n">map</span> <span class="n">snd</span> <span class="n">gls</span></code></pre></figure>

<h5 id="exercise-4">Exercise 4</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">maxFun</span> <span class="o">::</span> <span class="kt">Tree</span> <span class="kt">Employee</span> <span class="o">-&gt;</span> <span class="kt">GuestList</span>
<span class="n">maxFun</span> <span class="o">=</span> <span class="n">uncurry</span> <span class="n">moreFun</span> <span class="o">.</span> <span class="n">treeFold</span> <span class="n">nextLevel</span></code></pre></figure>

<h5 id="exercise-5">Exercise 5</h5>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">formatGLS</span> <span class="o">::</span> <span class="kt">GuestList</span> <span class="o">-&gt;</span> <span class="kt">String</span>
<span class="n">formatGLS</span> <span class="p">(</span><span class="kt">GL</span> <span class="n">es</span> <span class="n">fun</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">totalStr</span> <span class="o">++</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="o">++</span> <span class="n">nameStr</span>
  <span class="kr">where</span>
    <span class="n">totalStr</span> <span class="o">=</span> <span class="s">"Total fun: "</span> <span class="o">++</span> <span class="n">show</span> <span class="n">fun</span>
    <span class="n">nameStr</span> <span class="o">=</span> <span class="n">unlines</span> <span class="o">$</span> <span class="n">sort</span> <span class="o">$</span> <span class="n">map</span> <span class="n">empName</span> <span class="n">es</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">readFile</span> <span class="s">"company.txt"</span> <span class="o">&gt;&gt;=</span> <span class="n">putStrLn</span> <span class="o">.</span> <span class="n">formatGLS</span> <span class="o">.</span> <span class="n">maxFun</span> <span class="o">.</span> <span class="n">read</span></code></pre></figure>

:ET