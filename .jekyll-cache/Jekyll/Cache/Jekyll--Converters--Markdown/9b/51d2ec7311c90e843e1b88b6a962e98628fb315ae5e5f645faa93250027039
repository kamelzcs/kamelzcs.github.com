I"4<h4 id="256">2.56</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="nf">print-as-expression</span> <span class="no">#f</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">symbol?</span> <span class="nv">x</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">same-variable?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">v1</span><span class="p">)</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">v2</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="nv">num</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">exp</span> <span class="nv">num</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-sum</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">=number?</span> <span class="nv">a1</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">a2</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=number?</span> <span class="nv">a2</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">a1</span><span class="p">)</span>
        <span class="p">((</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">a1</span><span class="p">)</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">a2</span><span class="p">))</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">))</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'+</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-product</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="k">or</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">m1</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">m2</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=number?</span> <span class="nv">m1</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m2</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=number?</span> <span class="nv">m2</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m1</span><span class="p">)</span>
        <span class="p">((</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">m1</span><span class="p">)</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">m2</span><span class="p">))</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">))</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'*</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">sum?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">'+</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">addend</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">s</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">augend</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">s</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">product?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">'*</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">p</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">p</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">deriv</span> <span class="nv">exp</span> <span class="nv">var</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">number?</span> <span class="nv">exp</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">variable?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">same-variable?</span> <span class="nv">exp</span> <span class="nv">var</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">((</span><span class="nf">sum?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">make-sum</span> <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">addend</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
                   <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">augend</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)))</span>
        <span class="p">((</span><span class="nf">product?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">make-sum</span>
           <span class="p">(</span><span class="nf">make-product</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">exp</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">make-product</span> <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">exp</span><span class="p">))))</span>
        <span class="p">((</span><span class="nf">exponentiation?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">make-product</span>
           <span class="p">(</span><span class="nf">exponent</span> <span class="nv">exp</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">make-product</span>
             <span class="p">(</span><span class="nf">make-exponentiation</span>
               <span class="p">(</span><span class="nf">base</span> <span class="nv">exp</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">make-sum</span> <span class="p">(</span><span class="nf">exponent</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">-</span> <span class="mi">1</span><span class="p">)))</span>
             <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">base</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">))))</span>
        <span class="p">(</span><span class="k">else</span>
         <span class="p">(</span><span class="nf">error</span> <span class="s">"unknown expression type -- DERIV"</span> <span class="nv">exp</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-exponentiation</span> <span class="nv">base</span> <span class="nv">exp</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">base</span><span class="p">)</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'**</span> <span class="nv">base</span> <span class="nv">exp</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">exponentiation?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">'**</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">base</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">exponent</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">e</span><span class="p">))</span></code></pre></figure>

<p>The tricky part to use all the high level function such as
<code class="highlighter-rouge">make-sum</code>, as the <code class="highlighter-rouge">exp</code> could be a expression as well.</p>

<h4 id="257">2.57</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">augend</span> <span class="nv">s</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null?</span> <span class="nv">cdddr</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">caddr</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cons</span> <span class="ss">'+</span> <span class="p">(</span><span class="nb">cddr</span> <span class="nv">s</span><span class="p">))))</span></code></pre></figure>

<h4 id="258">2.58</h4>
<p>Skipped</p>

:ET