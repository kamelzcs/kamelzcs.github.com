I"d5<h4 id="134">1.34</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">g</span><span class="p">)</span> <span class="p">(</span><span class="nf">g</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nf">f</span> <span class="nv">f</span><span class="p">)</span>
<span class="nv">--&gt;</span>
<span class="p">(</span><span class="nf">f</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">--&gt;</span>
<span class="p">(</span><span class="nf">2</span> <span class="mi">2</span><span class="p">)</span></code></pre></figure>

<h4 id="135">1.35</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fixed-point</span> <span class="nv">f</span> <span class="nv">first-guess</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">close-enough?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">&lt;</span> <span class="p">(</span><span class="nb">abs</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">))</span> <span class="nv">tolerance</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">try</span> <span class="nv">guess</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">next</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">guess</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">close-enough?</span> <span class="nv">guess</span> <span class="nv">next</span><span class="p">)</span>
          <span class="nv">next</span>
          <span class="p">(</span><span class="nf">try</span> <span class="nv">next</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">try</span> <span class="nv">first-guess</span><span class="p">))</span>

<span class="p">(</span><span class="nf">fixed-point</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">1</span> <span class="nv">x</span><span class="p">)))</span> <span class="mf">1.0</span><span class="p">)</span></code></pre></figure>

<h4 id="136">1.36</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fixed-point</span> <span class="nv">f</span> <span class="nv">first-guess</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">close-enough?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">&lt;</span> <span class="p">(</span><span class="nb">abs</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">))</span> <span class="nv">tolerance</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">try</span> <span class="nv">guess</span> <span class="nv">tried</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">display</span> <span class="nv">guess</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">newline</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">next</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">guess</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">close-enough?</span> <span class="nv">guess</span> <span class="nv">next</span><span class="p">)</span>
          <span class="p">(</span><span class="k">begin</span>
            <span class="p">(</span><span class="nb">display</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">tried</span> <span class="mi">1</span><span class="p">))</span>
            <span class="p">(</span><span class="nb">newline</span><span class="p">)</span>
            <span class="nv">next</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">try</span> <span class="nv">next</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">tried</span> <span class="mi">1</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">try</span> <span class="nv">first-guess</span> <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="nf">fixed-point</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">log</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">log</span> <span class="nv">x</span><span class="p">)))</span> <span class="mf">2.0</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">average</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nf">fixed-point</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">average</span> <span class="nv">x</span>
                                  <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">log</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">log</span> <span class="nv">x</span><span class="p">))))</span> <span class="mf">2.0</span><span class="p">)</span></code></pre></figure>

<p>If order to display the iterate numbers, a new parameter <code class="highlighter-rouge">tried</code> is added in.
A new syntax <code class="highlighter-rouge">begin</code> is used in order to run multiple commands sequencely, which will
return the last expressionâ€™s value as the result.</p>

<p>The simple version will run <code class="highlighter-rouge">35</code> times, while the average version will only run <code class="highlighter-rouge">10</code> times.</p>

<h4 id="137">1.37</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">cont-frac</span> <span class="nv">n</span> <span class="nv">d</span> <span class="nv">k</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">iter</span> <span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">x</span> <span class="nv">k</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">x</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nf">d</span> <span class="nv">x</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">))))</span>
      <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">x</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">d</span> <span class="nv">x</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">iter</span> <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">cont-frac-iter</span> <span class="nv">n</span> <span class="nv">d</span> <span class="nv">k</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">iter</span> <span class="nv">k</span> <span class="nv">result</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">0</span><span class="p">)</span>
      <span class="nv">result</span>
      <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nf">d</span> <span class="nv">k</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">k</span><span class="p">)</span>
                  <span class="nv">result</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">k</span><span class="p">)</span>
                   <span class="p">(</span><span class="nf">d</span> <span class="nv">k</span><span class="p">))))</span></code></pre></figure>

<h4 id="138">1.38</h4>

<p>The key lies in finding out a math expression for</p>

<p><code class="highlighter-rouge">1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8,...</code></p>

<script type="math/tex; mode=display">% <![CDATA[
D(i) = \begin{cases}2(i+1)/3 & \text{(i+1) mod 3=0} \\ 1 & \text{otherwise} \end{cases} %]]></script>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">d</span> <span class="nv">i</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span>
              <span class="p">(</span><span class="nb">remainder</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">3</span><span class="p">)))</span>
    <span class="mi">1</span>
    <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span>
       <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="mi">1</span><span class="p">)</span>
          <span class="mi">3</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">euler-e</span>
  <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">cont-frac</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="mf">1.0</span><span class="p">)</span> <span class="nv">d</span> <span class="mi">10</span><span class="p">)))</span></code></pre></figure>

<h4 id="139">1.39</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">tan-cf</span> <span class="nv">x</span> <span class="nv">k</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cont-frac</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">a</span><span class="p">)</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">a</span> <span class="mi">1</span><span class="p">)</span>
                  <span class="nv">x</span>
                  <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">x</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span> <span class="nv">a</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
    <span class="nv">k</span><span class="p">))</span></code></pre></figure>

:ET