I"0<h4 id="425">4.25</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless</span> <span class="nv">condition</span> <span class="nv">usual-value</span> <span class="nv">exceptional-value</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="nv">condition</span> <span class="nv">exceptional-value</span> <span class="nv">usual-value</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">factorial</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">*</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="mi">1</span><span class="p">))</span></code></pre></figure>

<p>In applicative-order, <code class="highlighter-rouge">factorial</code> will enter an infinite loop, as
the <code class="highlighter-rouge">exceptional-value</code> is evaluated regardless the <code class="highlighter-rouge">condition</code>.</p>

<p>While in normal-order, the <code class="highlighter-rouge">condition</code> is judged before <code class="highlighter-rouge">exceptional-value</code> is evaluated.</p>

<h4 id="426">4.26</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">tagged-list?</span> <span class="nv">exp</span> <span class="ss">'unless</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless-clauses</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">exp</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless-condition</span> <span class="nv">clauses</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">clauses</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless-usual-value</span> <span class="nv">clauses</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">clauses</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless-exceptional-value</span> <span class="nv">clauses</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">clauses</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">unless-&gt;if</span> <span class="nv">exp</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">expand-unless-clauses</span> <span class="p">(</span><span class="nf">unless-clauses</span> <span class="nv">exp</span><span class="p">)))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">expand-unless-clauses</span> <span class="nv">clauses</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">make-if</span> <span class="p">(</span><span class="nf">unless-condition</span> <span class="nv">clauses</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">unless-exceptional-value</span> <span class="nv">clauses</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">unless-usual-value</span> <span class="nv">clauses</span><span class="p">)))</span></code></pre></figure>

<p>It would fail if <code class="highlighter-rouge">unless</code> is passed as parameter, as there is no such
procedure.</p>

<h4 id="427">4.27</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="nv">count</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">id</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">count</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">count</span> <span class="mi">1</span><span class="p">))</span>
  <span class="nv">x</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">w</span> <span class="p">(</span><span class="nf">id</span> <span class="p">(</span><span class="nf">id</span> <span class="mi">10</span><span class="p">)))</span>
<span class="c1">;;; L-Eval input:</span>
<span class="nv">count</span>
<span class="c1">;;; L-Eval value:</span>
<span class="mi">1</span>
<span class="c1">;;; L-Eval input:</span>
<span class="nv">w</span>
<span class="c1">;;; L-Eval value:</span>
<span class="mi">10</span>
<span class="c1">;;; L-Eval input:</span>
<span class="nv">count</span>
<span class="c1">;;; L-Eval value:</span>
<span class="mi">2</span></code></pre></figure>

<p><code class="highlighter-rouge">(define w (id (id 10)))</code> will cause the outer <code class="highlighter-rouge">id</code> being force, <code class="highlighter-rouge">(id 10)</code> is not evaluated and being returned as a thunk.</p>

<p>The evaluation of <code class="highlighter-rouge">w</code> forces the inner <code class="highlighter-rouge">id</code> being forced.</p>

<h4 id="428">4.28</h4>

<p>I think it would cause trouble if the <code class="highlighter-rouge">operator</code> is a thunk instead of actual procedure.
In order to make the <code class="highlighter-rouge">operator</code> be a thunk, the easiest way is to pass the procedure as a parameter.
such as:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">g</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">g</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">g</span> <span class="nv">x</span><span class="p">))</span>
<span class="p">(</span><span class="nf">f</span> <span class="nv">g</span> <span class="mi">10</span><span class="p">)</span></code></pre></figure>

<h4 id="429">4.29</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="c1">;;; L-Eval input:</span>
<span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">id</span> <span class="mi">10</span><span class="p">))</span>
<span class="c1">;;; L-Eval value:</span>
<span class="mi">100</span>
<span class="c1">;;; L-Eval input:</span>
<span class="nv">count</span>
<span class="c1">;;; L-Eval value:</span>
<span class="mi">1</span> <span class="c1">; with memorization, (id 10) is called once.</span>
<span class="mi">2</span> <span class="c1">; without memorization, (id 10) is called twice</span></code></pre></figure>

<p>To test the efficiency, simillar to the <code class="highlighter-rouge">4.24</code> problem.</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="nb">eval</span> <span class="o">'</span><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">factorial</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
      <span class="mi">1</span>
      <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">n</span><span class="p">)))</span> <span class="nv">the-global-environment</span><span class="p">)</span>

<span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">t0</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">t1</span> <span class="mi">0</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">loop</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">eval</span> <span class="o">'</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">1234</span><span class="p">)</span> <span class="nv">the-global-environment</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">t0</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">loop</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">t1</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">-</span> <span class="nv">t1</span> <span class="nv">t0</span><span class="p">))</span>

<span class="c1">;9.864471 second without memorization</span>
<span class="c1">;0.027408 second with memorization</span></code></pre></figure>

<h4 id="430">4.30</h4>

<ol>
  <li><code class="highlighter-rouge">display</code> is a primitive function, so Ben is right.</li>
  <li>with original version, <code class="highlighter-rouge">(p1 1) = (1,2)</code> and <code class="highlighter-rouge">(p2 1) = 1</code> while in Cy’s version, both of them would be <code class="highlighter-rouge">(1, 2)</code>.</li>
</ol>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">p2</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">p</span> <span class="nv">e</span><span class="p">)</span>
    <span class="nv">e</span>
    <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">p</span> <span class="p">(</span><span class="k">set!</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">x</span> <span class="o">'</span><span class="p">(</span><span class="nf">2</span><span class="p">)))))</span></code></pre></figure>

<p><code class="highlighter-rouge">(set! x (cons x '(2)))</code> is passed in as a thunk parameter <code class="highlighter-rouge">e</code> of the internal <code class="highlighter-rouge">p</code> procedure in the
original version and is not forced as it is not passed to a primitive procedure.</p>

<ol>
  <li>Obviously.</li>
  <li>I prefer the text’s. As lazy evalution is better not involved with side effects.</li>
</ol>

:ET