I"MX<h4 id="273">2.73</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="nv">global-array</span> <span class="o">'</span><span class="p">())</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-entry</span> <span class="nv">k</span> <span class="nv">v</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">k</span> <span class="nv">v</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">key</span> <span class="nv">entry</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">entry</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">value</span> <span class="nv">entry</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">entry</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">put</span> <span class="nv">op</span> <span class="nv">type</span> <span class="nv">item</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">put-helper</span> <span class="nv">k</span> <span class="nv">array</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">null?</span> <span class="nv">array</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nf">make-entry</span> <span class="nv">k</span> <span class="nv">item</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">key</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">array</span><span class="p">))</span> <span class="nv">k</span><span class="p">)</span> <span class="nv">array</span><span class="p">)</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">array</span><span class="p">)</span> <span class="p">(</span><span class="nf">put-helper</span> <span class="nv">k</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">array</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">global-array</span> <span class="p">(</span><span class="nf">put-helper</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">op</span> <span class="nv">type</span><span class="p">)</span> <span class="nv">global-array</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">op</span> <span class="nv">type</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">get-helper</span> <span class="nv">k</span> <span class="nv">array</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">null?</span> <span class="nv">array</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
          <span class="p">((</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">key</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">array</span><span class="p">))</span> <span class="nv">k</span><span class="p">)</span> <span class="p">(</span><span class="nf">value</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">array</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">get-helper</span> <span class="nv">k</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">array</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">get-helper</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">op</span> <span class="nv">type</span><span class="p">)</span> <span class="nv">global-array</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">symbol?</span> <span class="nv">x</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">same-variable?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">v1</span><span class="p">)</span> <span class="p">(</span><span class="nf">variable?</span> <span class="nv">v2</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">sum?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq?</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">'+</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">deriv</span> <span class="nv">exp</span> <span class="nv">var</span><span class="p">)</span>
   <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">number?</span> <span class="nv">exp</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
         <span class="p">((</span><span class="nf">variable?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">same-variable?</span> <span class="nv">exp</span> <span class="nv">var</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
         <span class="p">(</span><span class="k">else</span> <span class="p">((</span><span class="nf">get</span> <span class="ss">'deriv</span> <span class="p">(</span><span class="nf">operator</span> <span class="nv">exp</span><span class="p">))</span> <span class="p">(</span><span class="nf">operands</span> <span class="nv">exp</span><span class="p">)</span>
                                            <span class="nv">var</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">operator</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">exp</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">operands</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">exp</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">attach-tag</span> <span class="nv">type-tag</span> <span class="nv">contents</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">type-tag</span> <span class="ss">'scheme-number</span><span class="p">)</span>
      <span class="nv">contents</span>
      <span class="p">(</span><span class="nb">cons</span> <span class="nv">type-tag</span> <span class="nv">contents</span><span class="p">)))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">type-tag</span> <span class="nv">datum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">number?</span> <span class="nv">datum</span><span class="p">)</span> <span class="ss">'scheme-number</span><span class="p">)</span>
        <span class="p">((</span><span class="nb">pair?</span> <span class="nv">datum</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">datum</span><span class="p">))</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">error</span> <span class="s">"Bad tagged datum -- TYPE-TAG"</span> <span class="nv">datum</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">contents</span> <span class="nv">datum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">number?</span> <span class="nv">datum</span><span class="p">)</span> <span class="nv">datum</span><span class="p">)</span>
        <span class="p">((</span><span class="nb">pair?</span> <span class="nv">datum</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">datum</span><span class="p">))</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">error</span> <span class="s">"Bad tagged datum -- CONTENTS"</span> <span class="nv">datum</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">install-deriv-package</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="nv">num</span><span class="p">)</span>
    <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">exp</span> <span class="nv">num</span><span class="p">)))</span>

  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-sum</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">=number?</span> <span class="nv">a1</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">a2</span><span class="p">)</span>
          <span class="p">((</span><span class="nf">=number?</span> <span class="nv">a2</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">a1</span><span class="p">)</span>
          <span class="p">((</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">a1</span><span class="p">)</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">a2</span><span class="p">))</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">))</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'+</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">addend</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">augend</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">deriv-sum</span> <span class="nv">data</span> <span class="nv">var</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">make-sum</span> <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">addend</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">augend</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">var</span><span class="p">)))</span>

  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-product</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="k">or</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">m1</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">=number?</span> <span class="nv">m2</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">((</span><span class="nf">=number?</span> <span class="nv">m1</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m2</span><span class="p">)</span>
          <span class="p">((</span><span class="nf">=number?</span> <span class="nv">m2</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m1</span><span class="p">)</span>
          <span class="p">((</span><span class="k">and</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">m1</span><span class="p">)</span> <span class="p">(</span><span class="nb">number?</span> <span class="nv">m2</span><span class="p">))</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">))</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'*</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">deriv-product</span> <span class="nv">data</span> <span class="nv">var</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">make-sum</span>
     <span class="p">(</span><span class="nf">make-product</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">data</span><span class="p">)</span>
                   <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">var</span><span class="p">))</span>
     <span class="p">(</span><span class="nf">make-product</span> <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">multiplier</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
                   <span class="p">(</span><span class="nf">multiplicand</span> <span class="nv">data</span><span class="p">))))</span>

  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-exponentiation</span> <span class="nv">base</span> <span class="nv">exp</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
          <span class="p">((</span><span class="nf">=number?</span> <span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">base</span><span class="p">)</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'**</span> <span class="nv">base</span> <span class="nv">exp</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">base</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">exponent</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">data</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">deriv-exponentation</span> <span class="nv">data</span> <span class="nv">var</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">make-product</span>
     <span class="p">(</span><span class="nf">exponent</span> <span class="nv">data</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">make-product</span>
      <span class="p">(</span><span class="nf">make-exponentiation</span> <span class="p">(</span><span class="nf">base</span> <span class="nv">data</span><span class="p">)</span>
                           <span class="p">(</span><span class="nf">make-sum</span> <span class="p">(</span><span class="nf">exponent</span> <span class="nv">data</span><span class="p">)</span> <span class="p">(</span><span class="nb">-</span> <span class="mi">1</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">deriv</span> <span class="p">(</span><span class="nf">base</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">var</span><span class="p">))))</span>

  <span class="p">(</span><span class="nf">put</span> <span class="ss">'deriv</span> <span class="ss">'+</span> <span class="nv">deriv-sum</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">put</span> <span class="ss">'deriv</span> <span class="ss">'*</span> <span class="nv">deriv-product</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">put</span> <span class="ss">'deriv</span> <span class="ss">'**</span> <span class="nv">deriv-exponentation</span><span class="p">)</span>
  <span class="ss">'done</span><span class="p">)</span>

<span class="p">(</span><span class="nf">install-deriv-package</span><span class="p">)</span>
<span class="p">(</span><span class="nf">deriv</span> <span class="o">'</span><span class="p">(</span><span class="nf">**</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nf">**</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="ss">'x</span><span class="p">)</span></code></pre></figure>

<p><code class="highlighter-rouge">put</code> and <code class="highlighter-rouge">get</code> is from <a href="http://stackoverflow.com/questions/5499005/how-do-i-get-the-functions-put-and-get-in-sicp-scheme-exercise-2-78-and-on">stackoverflow</a>.</p>

<h4 id="275">2.75</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">dispatch</span> <span class="nv">op</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">eq?</span> <span class="nv">op</span> <span class="ss">'real-part</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nb">cos</span> <span class="nv">a</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">eq?</span> <span class="nv">op</span> <span class="ss">'imag-part</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nb">sin</span> <span class="nv">a</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">eq?</span> <span class="nv">op</span> <span class="ss">'magnitude</span><span class="p">)</span> <span class="nv">r</span><span class="p">)</span>
          <span class="p">((</span><span class="nb">eq?</span> <span class="nv">op</span> <span class="ss">'angle</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
          <span class="p">(</span><span class="k">else</span>
           <span class="p">(</span><span class="nf">error</span> <span class="s">"Unknown op -- MAKE-FROM-MAG-ANG"</span> <span class="nv">op</span><span class="p">))))</span>
  <span class="nv">dispatch</span><span class="p">)</span></code></pre></figure>

<h4 id="276">2.76</h4>
<p><code class="highlighter-rouge">Message passing</code> style is more flexible compared with  <code class="highlighter-rouge">data driven</code> style, which is self contained.
But <code class="highlighter-rouge">message passing</code> suffers from the <code class="highlighter-rouge">only generic procedures of one argument</code>.</p>

:ET