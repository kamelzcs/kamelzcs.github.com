I"‡a<h4 id="416">4.16</h4>

<p>a:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">lookup-variable-value</span> <span class="nv">var</span> <span class="nv">env</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">env-loop</span> <span class="nv">env</span><span class="p">)</span>
    <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">scan</span> <span class="nv">vars</span> <span class="nv">vals</span><span class="p">)</span>
      <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">null?</span> <span class="nv">vars</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">env-loop</span> <span class="p">(</span><span class="nf">enclosing-environment</span> <span class="nv">env</span><span class="p">)))</span>
            <span class="p">((</span><span class="nb">eq?</span> <span class="nv">var</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">vars</span><span class="p">))</span>
             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">equal?</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">vals</span><span class="p">)</span> <span class="ss">'*unassigned*</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">error</span> <span class="s">"Unassigned variable"</span> <span class="nv">var</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">car</span> <span class="nv">vals</span><span class="p">)))</span>
            <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">scan</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">vars</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">vals</span><span class="p">)))))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq?</span> <span class="nv">env</span> <span class="nv">the-empty-environment</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">error</span> <span class="s">"Unbound variable"</span> <span class="nv">var</span><span class="p">)</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">frame</span> <span class="p">(</span><span class="nf">first-frame</span> <span class="nv">env</span><span class="p">)))</span>
        <span class="p">(</span><span class="nf">scan</span> <span class="p">(</span><span class="nf">frame-variables</span> <span class="nv">frame</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">frame-values</span> <span class="nv">frame</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">env-loop</span> <span class="nv">env</span><span class="p">))</span></code></pre></figure>

<p>b:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">scan-out-defines</span> <span class="nv">body</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nf">definitions</span> <span class="p">(</span><span class="nf">filter</span> <span class="nv">definition?</span> <span class="nv">body</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">rest-of-lambda</span> <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nf">definition?</span> <span class="nv">x</span><span class="p">)))</span>
                                 <span class="nv">body</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">symbols</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">cadr</span> <span class="nv">definitions</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">let-body</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">s</span> <span class="o">'</span><span class="ss">'*unassigned*</span><span class="p">))</span>
                              <span class="nv">symbols</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">set-body</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'set!</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">s</span><span class="p">)))</span>
                        <span class="nv">definitions</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null?</span> <span class="nv">let-body</span><span class="p">)</span>
      <span class="nv">body</span>
      <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">append</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'let</span> <span class="nv">let-body</span><span class="p">)</span> <span class="nv">set-body</span> <span class="nv">rest-of-lambda</span><span class="p">)))))</span></code></pre></figure>

<p>This part is tricky, which took me several hours to make it.</p>
<ol>
  <li><code class="highlighter-rouge">''*unassigned*</code> needs two single quotes. Because <code class="highlighter-rouge">'*unassigned*</code> is the value
of a variable.</li>
  <li>The returned value should be in a list.</li>
  <li>The <code class="highlighter-rouge">(null? let-body)</code> should be used, otherwise it would loop forever.</li>
</ol>

<h4 id="417">4.17</h4>

<p>There is an extra frame in the transformed program because <code class="highlighter-rouge">let</code> is transformed to a <code class="highlighter-rouge">lambda</code> call.</p>

<p>To make the scope role ‚Äúsimultaneous‚Äù without creating a new frame, the internal definations could
be extract to the top before being runned.</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">rearrange</span> <span class="nv">body</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nf">definitions</span> <span class="p">(</span><span class="nf">filter</span> <span class="nv">definition?</span> <span class="nv">body</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">rest-of-lambda</span> <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nf">definition?</span> <span class="nv">x</span><span class="p">)))</span>
                                 <span class="nv">body</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">append</span> <span class="nv">definitions</span> <span class="nv">rest-of-lambda</span><span class="p">)))</span></code></pre></figure>

<h4 id="418">4.18</h4>

<p>Both this version and the original version would not work, as the values of <code class="highlighter-rouge">u</code> and <code class="highlighter-rouge">v</code> are
evaluated directly without through other proxy values.</p>

<h4 id="419">4.19</h4>

<p>The footnote gives the opinion of the author.
It is complicated implement the <code class="highlighter-rouge">simutaneous</code>, even though <code class="highlighter-rouge">Topological sort</code> could be used to deal with
simple defination order problem.</p>

<p>But when the <code class="highlighter-rouge">mutual_recursion</code> happens, it would not be possible to get the actual defination order at all.
For racket:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">a</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="k">define</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">x</span><span class="p">))</span>
    <span class="p">(</span><span class="k">define</span> <span class="nv">a</span> <span class="mi">5</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">f</span> <span class="mi">10</span><span class="p">))</span>

<span class="nv">a:</span> <span class="nv">undefined</span><span class="c1">;</span>
 <span class="nv">cannot</span> <span class="nv">use</span> <span class="nv">before</span> <span class="nv">initialization</span></code></pre></figure>

<h4 id="420">4.20</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">letrec?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">tagged-list?</span> <span class="nv">exp</span> <span class="ss">'letrec</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">letrec-&gt;let</span> <span class="nv">exp</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nf">assi</span> <span class="p">(</span><span class="nf">let-associations</span> <span class="nv">exp</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">rest-of-lambda</span> <span class="p">(</span><span class="nf">let-body</span> <span class="nv">exp</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">symbols</span> <span class="p">(</span><span class="nb">map</span> <span class="nv">car</span> <span class="nv">assi</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">let-body</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">s</span> <span class="o">'</span><span class="ss">'*unassigned*</span><span class="p">))</span>
                              <span class="nv">symbols</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">set-body</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'set!</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">s</span><span class="p">)))</span>
                        <span class="nv">assi</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null?</span> <span class="nv">let-body</span><span class="p">)</span>
      <span class="nv">exp</span>
      <span class="p">(</span><span class="nb">append</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">'let</span> <span class="nv">let-body</span><span class="p">)</span> <span class="nv">set-body</span> <span class="nv">rest-of-lambda</span><span class="p">))))</span></code></pre></figure>

<p><code class="highlighter-rouge">letrec</code>is evaluated includes all the <code class="highlighter-rouge">letrec</code> bindings, while <code class="highlighter-rouge">let</code> is not.</p>

<h4 id="421">4.21</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span>
   <span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">fact</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">fact</span> <span class="nv">fact</span> <span class="nv">n</span><span class="p">))</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
        <span class="mi">1</span>
        <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))))</span>
 <span class="mi">10</span><span class="p">)</span>

<span class="c1">;--&gt;</span>
<span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
   <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
     <span class="mi">1</span>
     <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
 <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
   <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
     <span class="mi">1</span>
     <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
 <span class="mi">10</span><span class="p">)</span>

<span class="c1">;--&gt;</span>
<span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">10</span> <span class="mi">1</span><span class="p">)</span>
  <span class="mi">1</span>
  <span class="p">(</span><span class="nb">*</span> <span class="mi">10</span>
     <span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
          <span class="mi">1</span>
          <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
      <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
          <span class="mi">1</span>
          <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
      <span class="mi">9</span><span class="p">)))</span>

<span class="c1">;--&gt;</span>
<span class="p">(</span><span class="nb">*</span> <span class="mi">10</span>
   <span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
        <span class="mi">1</span>
        <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">k</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)</span>
        <span class="mi">1</span>
        <span class="p">(</span><span class="nb">*</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">ft</span> <span class="nv">ft</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">)))))</span>
    <span class="mi">9</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nb">even?</span> <span class="nv">odd?</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">even?</span> <span class="nv">even?</span> <span class="nv">odd?</span> <span class="nv">x</span><span class="p">))</span>
   <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ev?</span> <span class="nv">od?</span> <span class="nv">n</span><span class="p">)</span>
     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">true</span> <span class="p">(</span><span class="nf">od?</span> <span class="nv">ev?</span> <span class="nv">od?</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
   <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">ev?</span> <span class="nv">od?</span> <span class="nv">n</span><span class="p">)</span>
     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">false</span> <span class="p">(</span><span class="nf">ev?</span> <span class="nv">ev?</span> <span class="nv">od?</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))))))</span></code></pre></figure>

<p>$\lambda$ makes functional programming possible.</p>

<h4 id="422">4.22</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">((</span><span class="nf">let?</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">analyze</span> <span class="p">(</span><span class="nf">let-&gt;combination</span> <span class="nv">exp</span><span class="p">)))</span></code></pre></figure>

<p>Analyze is able to handle it.</p>

<h4 id="423">4.23</h4>

<p><code class="highlighter-rouge">execute-sequence</code> has <code class="highlighter-rouge">cond</code> and other extra commands, while the text version
is just some runnable procedure.</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">env</span><span class="p">)</span>
  <span class="p">((</span><span class="k">lambda</span> <span class="p">(</span><span class="nf">env</span><span class="p">)</span> 
     <span class="p">(</span><span class="nf">proc1</span> <span class="nv">env</span><span class="p">)</span> 
     <span class="p">(</span><span class="nf">proc2</span> <span class="nv">env</span><span class="p">))</span>
   <span class="nv">env</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">proc3</span> <span class="nv">env</span><span class="p">))</span></code></pre></figure>

<h4 id="424">4.24</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="nb">eval</span> <span class="o">'</span><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">factorial</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
      <span class="mi">1</span>
      <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">n</span><span class="p">)))</span> <span class="nv">the-global-environment</span><span class="p">)</span>

<span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">t0</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">t1</span> <span class="mi">0</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">loop</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">eval</span> <span class="o">'</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">1234</span><span class="p">)</span> <span class="nv">the-global-environment</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">t0</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">loop</span> <span class="mi">0</span> <span class="mi">200</span><span class="p">)</span>
  <span class="p">(</span><span class="k">set!</span> <span class="nv">t1</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">-</span> <span class="nv">t1</span> <span class="nv">t0</span><span class="p">))</span></code></pre></figure>

<p>For original version: $3.302853$ second, while for optimized version $2.106789$ second.</p>
:ET