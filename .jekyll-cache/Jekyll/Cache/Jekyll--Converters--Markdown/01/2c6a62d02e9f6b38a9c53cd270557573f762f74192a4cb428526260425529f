I"’C<h4 id="121">1.21</h4>

<figure class="highlight"><pre><code class="language-scm" data-lang="scm">(define (square x) (* x x))
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))</code></pre></figure>

<p>199 and 1999 are primes, 19999â€™s smallest divisor is 7</p>

<h4 id="122">1.22</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">find-divisor</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">find-divisor</span> <span class="nv">n</span> <span class="nv">test-divisor</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">test-divisor</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">divides?</span> <span class="nv">test-divisor</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">test-divisor</span><span class="p">)</span>
        <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">find-divisor</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">test-divisor</span> <span class="mi">1</span><span class="p">)))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">divides?</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">remainder</span> <span class="nv">b</span> <span class="nv">a</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nb">even?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">remainder</span>
           <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">expomod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
           <span class="nv">m</span><span class="p">))</span>
        <span class="p">(</span><span class="k">else</span>
          <span class="p">(</span><span class="nb">remainder</span>
            <span class="p">(</span><span class="nb">*</span> <span class="nv">base</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
            <span class="nv">m</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fermat-test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">try-it</span> <span class="nv">a</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">a</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">try-it</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fast-prime?</span> <span class="nv">n</span> <span class="nv">times</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">times</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">fermat-test</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">fast-prime?</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">times</span> <span class="mi">1</span><span class="p">)))</span>
        <span class="p">(</span><span class="k">else</span> <span class="nv">false</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">timed-prime-test</span> <span class="nv">n</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">newline</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">display</span> <span class="nv">n</span><span class="p">)</span>
   <span class="p">(</span><span class="nf">start-prime-test</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">start-prime-test</span> <span class="nv">n</span> <span class="nv">start-time</span><span class="p">)</span>
   <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nf">prime?</span> <span class="nv">n</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">report-prime</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">)</span> <span class="nv">start-time</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">report-prime</span> <span class="nv">elapsed-time</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">display</span> <span class="s">" *** "</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">display</span> <span class="nv">elapsed-time</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">prime?</span> <span class="nv">n</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="nv">n</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="nv">start</span> <span class="nv">end</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">even?</span> <span class="nv">start</span><span class="p">)</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">start</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">end</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">&lt;=</span> <span class="nv">start</span> <span class="nv">end</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">timed-prime-test</span> <span class="nv">start</span><span class="p">)</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">start</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">end</span><span class="p">)))))</span></code></pre></figure>

<p>The tricky part is how to run evaluate expressions sequencely.
According to <a href="http://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29">cond expressio</a>, the <code class="highlighter-rouge">then-body</code>s are evaluated in order and the results of the last <code class="highlighter-rouge">then body</code> provide the result
for the whole <code class="highlighter-rouge">cond</code> form.</p>

<h4 id="126">1.26</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
   <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
         <span class="p">((</span><span class="nb">even?</span> <span class="nv">exp</span><span class="p">)</span>
          <span class="p">(</span><span class="nb">remainder</span> <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">)</span>
                        <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
                     <span class="nv">m</span><span class="p">))</span>
         <span class="p">(</span><span class="k">else</span>
          <span class="p">(</span><span class="nb">remainder</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">base</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
                     <span class="nv">m</span><span class="p">))))</span></code></pre></figure>

<p>The time complexity of this code is
$\sum_{i=0}^{log_n} 2^n = O(n)$</p>

<h4 id="127">1.27</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fixed-fermat-test</span> <span class="nv">n</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">a</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">fermat-full</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">a</span> <span class="mi">1</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
          <span class="p">((</span><span class="nb">not</span> <span class="p">(</span><span class="nf">fixed-fermat-test</span> <span class="nv">n</span> <span class="nv">a</span><span class="p">))</span> <span class="no">#f</span><span class="p">)</span>
          <span class="p">(</span><span class="k">else</span> <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">a</span> <span class="mi">1</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span></code></pre></figure>

<h4 id="128">1.28</h4>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">MR-expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nb">even?</span> <span class="nv">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="k">let*</span> <span class="p">([</span><span class="nf">part</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">)]</span>
                <span class="p">[</span><span class="nf">ans</span> <span class="p">(</span><span class="nb">remainder</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">part</span><span class="p">)</span> <span class="nv">m</span><span class="p">)])</span>
           <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="k">or</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">part</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">part</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">m</span> <span class="mi">1</span><span class="p">))))</span>
                    <span class="p">(</span><span class="nb">=</span> <span class="nv">ans</span> <span class="mi">1</span><span class="p">))</span>
             <span class="mi">0</span>
             <span class="nv">ans</span><span class="p">)))</span>
        <span class="p">(</span><span class="k">else</span>
          <span class="p">(</span><span class="nb">remainder</span>
            <span class="p">(</span><span class="nb">*</span> <span class="nv">base</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
            <span class="nv">m</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">MR-test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">try-it</span> <span class="nv">a</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nf">MR-expmod</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">try-it</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span></code></pre></figure>

<p>Used <code class="highlighter-rouge">let*</code> to deal with the local variable.</p>

:ET